# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  - group: docker
  - group: git
  - name: versionBuilder
    value: 'latest'
  - name: addonName
    value: 'openvpn-monitor'
  - name: repository
    value: 'RuimteDraak/hassio-repository.git'
  - name: buildTarget
    value: '--armv7'

jobs:
  - job: prepare
    condition: eq(variables['Build.SourceBranchName'], 'master')
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          $file = "$(Build.SourcesDirectory)/config.json"
          $json = (Get-Content -Path $file | Out-String | ConvertFrom-Json)
          Write-Host "$json"
          $version = $json.version
          Write-Host "##vso[task.setvariable variable=version;isOutput=true]$version"
          Write-Host "Version: $version"
      displayName: 'Read version from config file'

  - job: build_aamd64
    dependsOn: 'prepare'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: sudo docker login -u $(dockerUsername) -p $(dockerPassword)
      displayName: 'Docker hub login'

    - task: Bash@3
      inputs:
        targetTYpe: 'inline'
        script: sudo docker pull homeassistant/amd64-builder:$(versionBuilder)
      displayName: 'Install Builder'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo docker run --rm --privileged \
            -v ~/.docker:/root/.docker \
            -v /$(Build.SourcesDirectory):/data \
            -v /run/docker.sock:/run/docker.sock:rw \
            homeassistant/amd64-builder:$(versionBuilder) \
            -t /data \
            --amd64 \
            --docker-hub ruimtedraak \
            --docker-hub-check
      displayName: 'Build images'

  - job: build_i386
    dependsOn: 'prepare'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: sudo docker login -u $(dockerUsername) -p $(dockerPassword)
      displayName: 'Docker hub login'

    - task: Bash@3
      inputs:
        targetTYpe: 'inline'
        script: sudo docker pull homeassistant/amd64-builder:$(versionBuilder)
      displayName: 'Install Builder'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo docker run --rm --privileged \
            -v ~/.docker:/root/.docker \
            -v /$(Build.SourcesDirectory):/data \
            -v /run/docker.sock:/run/docker.sock:rw \
            homeassistant/amd64-builder:$(versionBuilder) \
            -t /data \
            --i386 \
            --docker-hub ruimtedraak \
            --docker-hub-check
      displayName: 'Build images'

  - job: build_aarch64
    dependsOn: 'prepare'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: sudo docker login -u $(dockerUsername) -p $(dockerPassword)
      displayName: 'Docker hub login'

    - task: Bash@3
      inputs:
        targetTYpe: 'inline'
        script: sudo docker pull homeassistant/amd64-builder:$(versionBuilder)
      displayName: 'Install Builder'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo docker run --rm --privileged \
            -v ~/.docker:/root/.docker \
            -v /$(Build.SourcesDirectory):/data \
            -v /run/docker.sock:/run/docker.sock:rw \
            homeassistant/amd64-builder:$(versionBuilder) \
            -t /data \
            --aarch64 \
            --docker-hub ruimtedraak \
            --docker-hub-check
      displayName: 'Build images'

  - job: build_armv7
    dependsOn: 'prepare'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: sudo docker login -u $(dockerUsername) -p $(dockerPassword)
      displayName: 'Docker hub login'

    - task: Bash@3
      inputs:
        targetTYpe: 'inline'
        script: sudo docker pull homeassistant/amd64-builder:$(versionBuilder)
      displayName: 'Install Builder'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo docker run --rm --privileged \
            -v ~/.docker:/root/.docker \
            -v /$(Build.SourcesDirectory):/data \
            -v /run/docker.sock:/run/docker.sock:rw \
            homeassistant/amd64-builder:$(versionBuilder) \
            -t /data \
            --armv7 \
            --docker-hub ruimtedraak \
            --docker-hub-check
      displayName: 'Build images'

  - job: build_armhf
    dependsOn: 'prepare'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: sudo docker login -u $(dockerUsername) -p $(dockerPassword)
      displayName: 'Docker hub login'

    - task: Bash@3
      inputs:
        targetTYpe: 'inline'
        script: sudo docker pull homeassistant/amd64-builder:$(versionBuilder)
      displayName: 'Install Builder'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          sudo docker run --rm --privileged \
            -v ~/.docker:/root/.docker \
            -v /$(Build.SourcesDirectory):/data \
            -v /run/docker.sock:/run/docker.sock:rw \
            homeassistant/amd64-builder:$(versionBuilder) \
            -t /data \
            --armhf \
            --docker-hub ruimtedraak \
            --docker-hub-check
      displayName: 'Build images'

  - job: update_repository
    dependsOn: [ build_aamd64, build_aarch64, build_armhf, build_armv7, build_i386 ]
    variables:
      version: $[ dependencies.A.outputs['prepare.version'] ]
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          git clone https://x-access-token:$(gitRepositoryToken)@github.com/$(repository)

          if (!(Test-Path "$(Build.SourcesDirectory)/hassio-repository/hassio-$(addonName)" -PathType Container)) {
            New-Item -Path "$(Build.SourcesDirectory)/hassio-repository" -Name "hassio-$(addonName)" -ItemType "directory"
            Write-Host "Created new directory hassio-$(addonName)"
          }

          cd hassio-repository/hassio-$(addonName)
          if (Test-Path "config.json" -PathType Leaf) {
            $json = (Get-Content -Path "config.json" | Out-String | ConvertFrom-Json)
            $newVersion = $json.version

            if ([version]$newVersion -gt [version]$version) {
              Write-Host "New version bigger then previous version"
            }
            else {
              Write-Host "Current version already greater, not updating repository"
              Exit 0
            }
          }
          else {
            Write-Host "No config found, creating first registration"
          }

          Copy-Item -Path "$(Build.SourcesDirectory)/config.json" -Destination "$(Build.SourcesDirectory)/hassio-repository/hassio-$(addonName)/config.json"
          Copy-Item -Path "$(Build.SourcesDirectory)/README.md" -Destination "$(Build.SourcesDirectory)/hassio-repository/hassio-$(addonName)/README.md"

          git config --global user.email "RuimteDraak@no-reply.nl"
          git config --global user.name "RuimteDraak"
          git add --all
          git commit -m "Update $(addonName) to version $version"
          git push
          Write-Host "Updated repository to version $version"
      displayName: 'Update repository'

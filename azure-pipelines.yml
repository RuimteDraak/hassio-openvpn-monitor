# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  - group: docker
  - group: git
  - name: versionBuilder
    value: '2.0'
  - name: addonName
    value: 'openvpn-monitor'
  - name: repository
    value: 'RuimteDraak/hassio-repository.git'

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      $file = "$(Build.SourcesDirectory)/config.json"
      $json = (Get-Content -Path $file | Out-String | ConvertFrom-Json)
      Write-Host "$json"
      $version = $json.version
      Write-Host "##vso[task.setvariable variable=version]$version"
      Write-Host "Version: $version"
  displayName: 'Read version from config file'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: sudo docker login -u $(dockerUsername) -p $(dockerPassword)
  displayName: 'Docker hub login'

- task: Bash@3
  inputs:
    targetTYpe: 'inline'
    script: sudo docker pull homeassistant/amd64-builder:$(versionBuilder)
  displayName: 'Install Builder'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      sudo docker run --rm --privileged \
        -v ~/.docker:/root/.docker \
        -v /$(Build.SourcesDirectory):/data \
        -v /run/docker.sock:/run/docker.sock:rw \
        homeassistant/amd64-builder:$(versionBuilder) \
        -t /data \
        # --armhf \
        --armv7 \
        # --amd64 \
        # --aarch64 \
        # --i386 \
        --docker-hub ruimtedraak \
        --docker-hub-check
  displayName: 'Build images'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      git clone https://x-access-token:$(gitRepositoryToken)@github.com/$(repository)

      if (!(Test-Path "$(Build.SourcesDirectory)/hassio-repository/hassio-$(addonName)" -PathType Container)) {
        New-Item -Path "$(Build.SourcesDirectory)/hassio-repository" -Name "hassio-$(addonName)" -ItemType "directory"
        Write-Host "Created new directory hassio-$(addonName)"
      }

      cd hassio-repository/hassio-$(addonName)
      if (Test-Path "config.json" -PathType Leaf) {
        $json = (Get-Content -Path "config.json" | Out-String | ConvertFrom-Json)
        $version = $json.version

        if ([version]$version -gt [version]$env:version) {
          Write-Host "New version bigger then previous version"
        }
        else {
          Write-Host "Current version already greater, not updating repository"
          Exit 0
        }
      }
      else {
        Write-Host "No config found, creating first registration"
      }

      Copy-Item -Path "$(Build.SourcesDirectory)/config.json" -Destination "$(Build.SourcesDirectory)/hassio-repository/hassio-$(addonName)/config.json"
      Copy-Item -Path "$(Build.SourcesDirectory)/README.md" -Destination "$(Build.SourcesDirectory)/hassio-repository/hassio-$(addonName)/README.md"

      git config --global user.email "RuimteDraak@no-reply.nl"
      git config --global user.name "RuimteDraak"
      git add --all
      git commit -m "Update $(addonName) to version $env:version"
      git push
      Write-Host "Updated repository to version $env:version"
  displayName: 'Update repository'
